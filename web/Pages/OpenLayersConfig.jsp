<script type="text/javascript"  >
	var width;
	var height;
	var currPopupText;//Text of the the popup

	// TODO verify how this variable works for other layers and see
	// from where we can obtain the current elevation.
	var elevation = 0;

	//Should contain the selected start date and is used to obtain punctual
	// data from the temporal data.
	var startDate;

	//Creates 100 layer objects
	for (var i = 0; i < 100; i++) {
		eval("var layer" + i);
	}

	function initOl3() {
		
		<jsp:include page="../common/JS/mapDisplay/Popup.js" />
			
		var bounds = mapConfig.mapBounds;
		var extent = mapConfig.restrictedExtent;
		var maxRes = mapConfig.maxResolution;
		var minRes = mapConfig.minResolution;
		
        var strCenter = mapConfig.mapcenter.split(",");

        var lat = 0;
        var lon = 0;
        if( strCenter[0].split("=")[0].toLowerCase() === "lat"){
            lat = Number(strCenter[0].split("=")[1]);
            lon = Number(strCenter[1].split("=")[1]);
        }else{
            lat = Number(strCenter[1].split("=")[1]);
            lon = Number(strCenter[0].split("=")[1]);
        }

        var defCenter;

        if(_map_bk_layer === "wms"){
            //If the default projection is not 4326 then we need to transform 
            // the projections to the default map projection
            if(_map_projection !== 'EPSG:4326'){
                defCenter= ol.proj.transform([lon, lat], 'EPSG:4326', _map_projection);
            }else{
                defCenter= [lon,lat];
            }
        }else{
            if(_map_bk_layer === "osm"){
                _map_projection = 'EPSG:3857';//Force projection for osm background layer
                defCenter= ol.proj.transform([lon, lat], 'EPSG:4326', _map_projection);
            }
        }

        //This control is used to display Lat and Lon when the user is moving the mouse over the map
        var mousePositionControl = new ol.control.MousePosition({
          coordinateFormat: ol.coordinate.createStringXY(4),
          projection: 'EPSG:4326',
          // comment the following two lines to have the mouse position
          // be placed within the map.
          className: 'ol-lat-lon',
          target: document.getElementById('location'),
          undefinedHTML: '&nbsp;'
        });

        //This is the control for the scale line at the bottom of the map
        var scaleLineControl = new ol.control.ScaleLine();
        var fullScreen = new ol.control.FullScreen();

		ol3view = new ol.View2D({
                projection: _map_projection,
                center: defCenter,
                zoom: mapConfig.zoom,
                });
		
		/**
		 * Create the map.
		 */
		map = new ol.Map({
            controls:ol.control.defaults().extend([mousePositionControl, scaleLineControl]),
			overlays: [ol_popup], //Overlay used for popup
			target: 'map', // Define 'div' that contains the map
            renderers: [ol.RendererHint.CANVAS, ol.RendererHint.DOM],
			view: ol3view
		});

        //Adds a zoom slider on the map
        zoomslider = new ol.control.ZoomSlider();
        //map.addControl(zoomslider);//Adds the zoom slider to the map
        map.addControl(fullScreen);// Adds the button to see the map full screen

		
		//This openLayerConfig is generated by the java file OpenLayersManager.java 
		//it loads all the layers that are needed for the map. 
	${openLayerConfig}
		}
</script>
